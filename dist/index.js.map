{"version":3,"sources":["../src/constants.js","../src/paynow.js","../src/utils.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const RESPONSE_OK = \"ok\";\r\nconst RESPONSE_ERROR = \"error\";\r\n\r\nconst URL_INITIATE_TRANSACTION =\r\n  \"https://www.paynow.co.zw/interface/initiatetransaction\";\r\nconst URL_INITIATE_MOBILE_TRANSACTION =\r\n  \"https://www.paynow.co.zw/interface/remotetransaction\";\r\n","const http = require(\"request-promise-native\");\r\n\r\nclass StatusResponse {\r\n  /**\r\n   * Merchant Transaction Reference\r\n   */\r\n  reference: String;\r\n\r\n  /**\r\n   * The original amount of the transaction\r\n   */\r\n  amount: String;\r\n\r\n  /**\r\n   * Paynow transaction reference\r\n   */\r\n  paynowreference: String;\r\n\r\n  /**\r\n   * The URL on Paynow the merchant site can poll to confirm the transactionâ€™s current status.\r\n   */\r\n  pollurl: String;\r\n\r\n  /**\r\n   * Status returned from Paynow\r\n   */\r\n  status: String;\r\n\r\n  error: String;\r\n\r\n  /**\r\n   * Default constructor\r\n   *\r\n   * @param data\r\n   */\r\n  constructor(data) {\r\n    if (data.status.toLowerCase() === RESPONSE_ERROR) {\r\n      this.error = data.error;\r\n    } else {\r\n      this.reference = data.reference;\r\n      this.amount = data.amount;\r\n      this.paynowreference = data.paynowreference;\r\n      this.pollurl = data.pollurl;\r\n      this.status = data.status;\r\n    }\r\n  }\r\n}\r\n\r\nclass InitResponse {\r\n  /**\r\n   * Boolean indicating whether initiate request was successful or not\r\n   */\r\n  success: boolean;\r\n\r\n  /**\r\n   * Boolean indicating whether the response contains a url to redirect to\r\n   */\r\n  hasRedirect: boolean;\r\n\r\n  /**\r\n   * The url the user should be taken to so they can make a payment\r\n   */\r\n  redirectUrl: String;\r\n\r\n  /**\r\n   * The error message from Paynow, if any\r\n   */\r\n  error: String;\r\n\r\n  /**\r\n   * The poll URL sent from Paynow\r\n   */\r\n  pollUrl: String;\r\n\r\n  /**\r\n   * The instructions for USSD push for customers to dial incase of mobile money payments\r\n   */\r\n  instructions: String;\r\n\r\n  /**\r\n   * The status from paynow\r\n   * @type {String}\r\n   */\r\n  status: String;\r\n\r\n  /**\r\n   * Default constructor\r\n   *\r\n   * @param data\r\n   */\r\n  constructor(data) {\r\n    this.status = data.status.toLowerCase();\r\n    this.success = this.status === RESPONSE_OK;\r\n    this.hasRedirect = typeof data.browserurl !== \"undefined\";\r\n\r\n    if (!this.success) {\r\n      this.error = data.error;\r\n    } else {\r\n      if (this.hasRedirect) {\r\n        this.redirectUrl = data.browserurl;\r\n        this.pollUrl = data.pollurl;\r\n      }\r\n\r\n      if (typeof data.instructions !== \"undefined\") {\r\n        this.instructions = data.instructions;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass Payment {\r\n  /**\r\n   * Unique identifier for transaction\r\n   */\r\n  reference: string;\r\n\r\n  /**\r\n   * Items being paid from by client\r\n   */\r\n  items: [];\r\n\r\n  /**\r\n   * Email address from client\r\n   */\r\n  authemail: String;\r\n\r\n  /**\r\n   * Payment constructor\r\n   * @param reference\r\n   */\r\n  constructor(reference, authEmail) {\r\n    this.reference = reference;\r\n    this.authEmail = authEmail;\r\n\r\n    this.items = [];\r\n  }\r\n\r\n  /**\r\n   * Adds an item to the 'shopping cart'\r\n   * @param title\r\n   * @param amount\r\n   * @returns {*} Returns false if parameters fail validation\r\n   */\r\n  add(title: String, amount: Number) {\r\n    if (title.isNullOrEmpty() || amount <= 0) {\r\n      return false;\r\n    }\r\n\r\n    this.items.push({\r\n      title,\r\n      amount\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  info() {\r\n    let str = \"\";\r\n    let infoArr = [];\r\n    this.items.forEach(function(value) {\r\n      infoArr.push(value.title);\r\n    });\r\n\r\n    str = infoArr.join(\",\");\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * Get the total of the items in the cart\r\n   * @returns {*|number}\r\n   */\r\n  total() {\r\n    return this.items.reduce(function(accumulator, value) {\r\n      return accumulator + Number(value.amount);\r\n    }, 0);\r\n  }\r\n}\r\n\r\nmodule.exports = class Paynow {\r\n  /**\r\n   * Merchant's integration id\r\n   */\r\n  integrationId: String;\r\n\r\n  /**\r\n   * Merchant's integration key\r\n   */\r\n  integrationKey: String;\r\n\r\n  /**\r\n   * Url where where transaction status will be sent\r\n   */\r\n  resultUrl: String;\r\n\r\n  /**\r\n   * Url to redirect the user after payment\r\n   */\r\n  returnUrl: String;\r\n\r\n  /**\r\n   * Default constructor\r\n   *\r\n   * @param integrationId {String} Merchant's integration id\r\n   * @param integrationKey {String} Merchant's integration key\r\n   * @param resultUrl {String} Url where where transaction status will be sent\r\n   * @param returnUrl {String} Url to redirect the user after payment\r\n   */\r\n  constructor(integrationId, integrationKey, resultUrl, returnUrl) {\r\n    this.integrationId = integrationId;\r\n    this.integrationKey = integrationKey;\r\n    this.resultUrl = resultUrl;\r\n    this.returnUrl = returnUrl;\r\n  }\r\n\r\n  /**\r\n   * Send a payment to paynow\r\n   * @param payment\r\n   */\r\n  send(payment) {\r\n    if (typeof payment !== \"object\") {\r\n      return false;\r\n    }\r\n\r\n    if (!(payment instanceof Payment)) {\r\n      if (\r\n        \"reference\" in payment &&\r\n        \"description\" in payment &&\r\n        \"amount\" in payment\r\n      ) {\r\n        payment = new Payment(payment[\"reference\"]).add(\r\n          payment[\"reference\"],\r\n          payment[\"amount\"]\r\n        );\r\n      } else {\r\n        this.fail(\r\n          \"Invalid object passed to function. Object must have the following keys: reference, description, amount\"\r\n        );\r\n      }\r\n    }\r\n\r\n    return this.init(payment);\r\n  }\r\n\r\n  /**\r\n   * Send a mobile money payment to paynow\r\n   * @param payment\r\n   */\r\n  sendMobile(payment, phone: String, method: String) {\r\n    if (typeof payment !== \"object\") {\r\n      return false;\r\n    }\r\n\r\n    if (!(payment instanceof Payment) && phone && method) {\r\n      if (\r\n        \"reference\" in payment &&\r\n        \"description\" in payment &&\r\n        \"amount\" in payment &&\r\n        \"authemail\" in payment\r\n      ) {\r\n        payment = new Payment(payment[\"reference\"], payment[\"authEmail\"]).add(\r\n          payment[\"reference\"],\r\n          payment[\"amount\"]\r\n        );\r\n      } else {\r\n        this.fail(\r\n          \"Invalid object passed to function. Object must have the following keys: reference, description, amount, authemail\"\r\n        );\r\n      }\r\n    }\r\n\r\n    return this.initMobile(payment, phone, method);\r\n  }\r\n\r\n  /**\r\n   * Create a new Paynow payment\r\n   * @param {String} reference This is the unique reference of the transaction\r\n   * @param {String} authEmail This is the email address of the person making payment. Required for mobile transactions\r\n   * @returns {Payment}\r\n   */\r\n  createPayment(reference: string, authEmail: string) {\r\n    return new Payment(reference, authEmail);\r\n  }\r\n\r\n  /**\r\n   * Throw an exception with the given message\r\n   * @param message*\r\n   * @returns void\r\n   */\r\n  fail(message: String) {\r\n    throw new Error(message);\r\n  }\r\n\r\n  /**\r\n   * Initialize a new transaction with PayNow\r\n   * @param payment\r\n   * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n   */\r\n  init(payment: Payment) {\r\n    this.validate(payment);\r\n\r\n    let data = this.build(payment);\r\n\r\n    return http(\r\n      {\r\n        method: \"POST\",\r\n        uri: URL_INITIATE_TRANSACTION,\r\n        form: data,\r\n        json: false\r\n      },\r\n      false\r\n    ).then(response => {\r\n      return this.parse(response);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize a new mobile transaction with PayNow\r\n   * @param payment\r\n   * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n   */\r\n  initMobile(payment: Payment, phone: String, method: String) {\r\n    this.validate(payment);\r\n\r\n    let data = this.buildMobile(payment, phone, method);\r\n\r\n    return http(\r\n      {\r\n        method: \"POST\",\r\n        uri: URL_INITIATE_MOBILE_TRANSACTION,\r\n        form: data,\r\n        json: false\r\n      },\r\n      false\r\n    ).then(response => {\r\n      return this.parse(response);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parses the response from Paynow\r\n   * @param response\r\n   * @returns {InitResponse}\r\n   */\r\n  parse(response) {\r\n    if (typeof response === \"undefined\") {\r\n      return null;\r\n    }\r\n    if (response.length > 0) {\r\n      response = this.parseQuery(response);\r\n\r\n      if (!this.verifyHash(response)) {\r\n        throw new Error(\"Hashes do not match!\");\r\n      }\r\n\r\n      return new InitResponse(response);\r\n    } else {\r\n      throw new Error(\"An unknown error occurred\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a SHA512 hash of the transactions\r\n   * @param values\r\n   * @param integrationKey\r\n   * @returns {string}\r\n   */\r\n  generateHash(values: Object, integrationKey: String) {\r\n    let sha512 = require(\"js-sha512\").sha512;\r\n    let string = \"\";\r\n\r\n    for (const key of Object.keys(values)) {\r\n      if (key !== \"hash\") {\r\n        string += values[key];\r\n      }\r\n    }\r\n\r\n    string += integrationKey.toLowerCase();\r\n\r\n    return sha512(string).toUpperCase();\r\n  }\r\n\r\n  /**\r\n   * Verify hashes at all interactions with server\r\n   * @param {*} values\r\n   */\r\n  verifyHash(values: Object) {\r\n    if (typeof values.hash === \"undefined\") {\r\n      return false;\r\n    } else {\r\n      return values.hash === this.generateHash(values, this.integrationKey);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * URL encodes the given string\r\n   * @param str {String}\r\n   * @returns {String}\r\n   */\r\n  urlEncode(str) {\r\n    return encodeURI(str);\r\n  }\r\n\r\n  /**\r\n   * URL decodes the given string\r\n   * @param str {String}\r\n   * @returns {String}\r\n   */\r\n  urlDecode(str) {\r\n    return decodeURIComponent(\r\n      (str + \"\")\r\n        .replace(/%(?![\\da-f]{2})/gi, function() {\r\n          return \"%25\";\r\n        })\r\n        .replace(/\\+/g, \"%20\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Parse responses from Paynow\r\n   * @param queryString\r\n   */\r\n  parseQuery(queryString) {\r\n    let query = {};\r\n    let pairs = (queryString[0] === \"?\"\r\n      ? queryString.substr(1)\r\n      : queryString\r\n    ).split(\"&\");\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      let pair = pairs[i].split(\"=\");\r\n      query[this.urlDecode(pair[0])] = this.urlDecode(pair[1] || \"\");\r\n    }\r\n\r\n    // if(!this.verifyHash(query))\r\n    //         throw new Error(\"Hash mismatch\");\r\n    return query;\r\n  }\r\n\r\n  /**\r\n   * Build up a payment into the format required by Paynow\r\n   * @param payment\r\n   * @returns {{resulturl: String, returnurl: String, reference: String, amount: number, id: String, additionalinfo: String, authemail: String, status: String}}\r\n   */\r\n  build(payment: Payment) {\r\n    let data = {\r\n      resulturl: this.resultUrl,\r\n      returnurl: this.returnUrl,\r\n      reference: payment.reference,\r\n      amount: payment.total(),\r\n      id: this.integrationId,\r\n      additionalinfo: payment.info(),\r\n      authemail:\r\n        typeof payment.authEmail === \"undefined\" ? \"\" : payment.authEmail,\r\n      status: \"Message\"\r\n    };\r\n\r\n    for (const key of Object.keys(data)) {\r\n      if (key === \"hash\") continue;\r\n\r\n      data[key] = this.urlEncode(data[key]);\r\n    }\r\n\r\n    data.hash = this.generateHash(data, this.integrationKey);\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Build up a mobile payment into the format required by Paynow\r\n   * @param payment\r\n   * @returns {{resulturl: String, returnurl: String, reference: String, amount: number, id: String, additionalinfo: String, authemail: String, status: String}}\r\n   */\r\n  buildMobile(payment: Payment, phone: String, method: String) {\r\n    if (payment.authEmail.isNullOrEmpty() || payment.authEmail.length <= 0) {\r\n      throw new Error(\r\n        \"Auth email is required for mobile transactions. You can pass it as the second parameter to the createPayment method call\"\r\n      );\r\n    }\r\n\r\n    let data = {\r\n      resulturl: this.resultUrl,\r\n      returnurl: this.returnUrl,\r\n      reference: payment.reference,\r\n      amount: payment.total(),\r\n      id: this.integrationId,\r\n      additionalinfo: payment.info(),\r\n      authemail: payment.authEmail,\r\n      phone: phone,\r\n      method: method,\r\n      status: \"Message\"\r\n    };\r\n\r\n    for (const key of Object.keys(data)) {\r\n      if (key === \"hash\") continue;\r\n\r\n      data[key] = this.urlEncode(data[key]);\r\n    }\r\n\r\n    data.hash = this.generateHash(data, this.integrationKey);\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Check the status of a transaction\r\n   * @param url\r\n   * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n   */\r\n  pollTransaction(url) {\r\n    return http(\r\n      {\r\n        method: \"POST\",\r\n        uri: url,\r\n        json: false\r\n      },\r\n      false\r\n    ).then(response => {\r\n      return this.parseStatusUpdate(response);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parses the response from Paynow\r\n   * @param response\r\n   * @returns {StatusResponse}\r\n   */\r\n  parseStatusUpdate(response) {\r\n    if (response.length > 0) {\r\n      response = this.parseQuery(response);\r\n\r\n      if (!this.verifyHash(response)) {\r\n        throw new Error(\"Hashes do not match!\");\r\n      }\r\n\r\n      return new StatusResponse(response);\r\n    } else {\r\n      throw new Error(\"An unknown error occurred\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates an outgoing request before sending it to Paynow (data sanity checks)\r\n   * @param payment\r\n   */\r\n  validate(payment: Payment) {\r\n    if (payment.reference.isNullOrEmpty()) {\r\n      this.fail(\"Reference is required\");\r\n    }\r\n\r\n    if (payment.items.length <= 0) {\r\n      this.fail(\"You need to have at least one item in cart\");\r\n    }\r\n\r\n    if (payment.total() <= 0) {\r\n      this.fail(\"The total should be greater than zero\");\r\n    }\r\n  }\r\n};\r\n","String.prototype.isNullOrEmpty = function(e) {\r\n    return !(this == null ? e : this);\r\n};"]}