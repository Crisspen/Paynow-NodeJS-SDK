{"version":3,"sources":["../src/constants.js","../src/paynow.js","../src/utils.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["const RESPONSE_OK = \"ok\";\r\nconst RESPONSE_ERROR = \"error\";\r\n\r\nconst URL_INITIATE_TRANSACTION =\r\n  \"https://www.paynow.co.zw/interface/initiatetransaction\";\r\nconst URL_INITIATE_MOBILE_TRANSACTION =\r\n  \"https://paynow.co.zw/interface/remotetransaction\";\r\n","const http = require('request-promise-native');\r\n\r\nclass StatusResponse {\r\n\r\n    /**\r\n     * Merchant Transaction Reference\r\n     */\r\n    reference: String;\r\n\r\n    /**\r\n     * The original amount of the transaction\r\n     */\r\n    amount: String;\r\n\r\n    /**\r\n     * Paynow transaction reference\r\n     */\r\n    paynowreference: String;\r\n\r\n    /**\r\n     * The URL on Paynow the merchant site can poll to confirm the transactionâ€™s current status. \r\n     */\r\n    pollurl: String;\r\n\r\n    /**\r\n     * Status returned from Paynow\r\n     */\r\n    status: String;\r\n\r\n    error: String;\r\n\r\n    /**\r\n     * Default constructor\r\n     *\r\n     * @param data\r\n     */\r\n    constructor(data) {\r\n\r\n        if(data.status.toLowerCase() === RESPONSE_ERROR){\r\n            this.error = data.error;\r\n        }else{\r\n            this.reference = data.reference;\r\n            this.amount = data.amount;\r\n            this.paynowreference = data.paynowreference;\r\n            this.pollurl = data.pollurl;\r\n            this.status = data.status;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nclass InitResponse {\r\n\r\n    /**\r\n     * Boolean indicating whether initiate request was successful or not\r\n     */\r\n    success: boolean;\r\n\r\n    /**\r\n     * Boolean indicating whether the response contains a url to redirect to\r\n     */\r\n    hasRedirect: boolean;\r\n\r\n    /**\r\n     * The url the user should be taken to so they can make a payment\r\n     */\r\n    redirectUrl: String;\r\n\r\n    /**\r\n     * The error message from Paynow, if any\r\n     */\r\n    error: String;\r\n\r\n    /**\r\n     * The poll URL sent from Paynow\r\n     */\r\n    pollUrl: String;\r\n\r\n    /**\r\n     * The instructions for USSD push for customers to dial incase of mobile money payments\r\n     */\r\n    instructions: String;\r\n\r\n    /**\r\n     * The status from paynow\r\n     * @type {String}\r\n     */\r\n    status: String\r\n\r\n    /**\r\n     * Default constructor\r\n     *\r\n     * @param data\r\n     */\r\n    constructor(data) {\r\n        this.status = data.status.toLowerCase()\r\n        this.success = this.status === RESPONSE_OK;\r\n        this.hasRedirect = typeof data.browserurl !== \"undefined\";\r\n\r\n        if (!this.success) {\r\n            this.error = data.error;\r\n        }else{\r\n            if (this.hasRedirect) {\r\n                this.redirectUrl = data.browserurl;\r\n                this.pollUrl = data.pollurl;\r\n            }\r\n            \r\n            if(typeof data.instructions !== \"undefined\"){\r\n                this.instructions = data.instructions;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Payment {\r\n    /**\r\n     * Unique identifier for transaction\r\n     */\r\n    reference: string;\r\n\r\n    /**\r\n     * Items being paid from by client\r\n     */\r\n    items: [];\r\n\r\n    /**\r\n     * Email address from client\r\n     */\r\n    authemail: String;\r\n\r\n\r\n    /**\r\n     * Payment constructor\r\n     * @param reference\r\n     */\r\n    constructor(reference, authEmail) {\r\n        this.reference = reference;\r\n        this.authEmail = authEmail;\r\n\r\n        this.items = [];\r\n    }\r\n\r\n    /**\r\n     * Adds an item to the 'shopping cart'\r\n     * @param title\r\n     * @param amount\r\n     * @returns {*} Returns false if parameters fail validation\r\n     */\r\n    add(title: String, amount: Number) {\r\n        if (title.isNullOrEmpty() || amount <= 0) {\r\n            return false;\r\n        }\r\n\r\n        this.items.push({\r\n            title,\r\n            amount\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    info() {\r\n        let str = \"\";\r\n        let infoArr = [];\r\n        this.items.forEach(function (value) {\r\n            infoArr.push(value.title);\r\n        });\r\n\r\n        str = infoArr.join(\",\");\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Get the total of the items in the cart\r\n     * @returns {*|number}\r\n     */\r\n    total() {\r\n        return this.items.reduce(function (accumulator, value) {\r\n            return accumulator + Number(value.amount);\r\n        }, 0);\r\n    }\r\n\r\n}\r\n\r\n\r\nmodule.exports = class Paynow {\r\n    /**\r\n     * Merchant's integration id\r\n     */\r\n    integrationId: String;\r\n\r\n    /**\r\n     * Merchant's integration key\r\n     */\r\n    integrationKey: String;\r\n\r\n    /**\r\n     * Url where where transaction status will be sent\r\n     */\r\n    resultUrl: String;\r\n\r\n    /**\r\n     * Url to redirect the user after payment\r\n     */\r\n    returnUrl: String;\r\n\r\n    /**\r\n     * Default constructor\r\n     *\r\n     * @param integrationId {String} Merchant's integration id\r\n     * @param integrationKey {String} Merchant's integration key\r\n     * @param resultUrl {String} Url where where transaction status will be sent\r\n     * @param returnUrl {String} Url to redirect the user after payment\r\n     */\r\n    constructor(integrationId, integrationKey, resultUrl, returnUrl) {\r\n        this.integrationId = integrationId;\r\n        this.integrationKey = integrationKey;\r\n        this.resultUrl = resultUrl;\r\n        this.returnUrl = returnUrl\r\n    }\r\n\r\n    /**\r\n     * Send a payment to paynow\r\n     * @param payment \r\n     */\r\n    send(payment) {\r\n        if(typeof payment !== 'object') {\r\n            return false;\r\n        }\r\n\r\n        if(!(payment instanceof Payment)) {\r\n            if('reference' in payment && 'description' in payment && 'amount' in payment) {\r\n                payment = new Payment(payment['reference']).add(payment['reference'], payment['amount'])\r\n            } else {\r\n                this.fail('Invalid object passed to function. Object must have the following keys: reference, description, amount');\r\n            }\r\n        }\r\n\r\n        return this.init(payment);\r\n    }\r\n\r\n    /**\r\n     * Send a mobile money payment to paynow\r\n     * @param payment \r\n     */\r\n    sendMobile(payment, phone: String, method: String) {\r\n        if(typeof payment !== 'object') {\r\n            return false;\r\n        }\r\n\r\n        if(!(payment instanceof Payment) && phone && method) {\r\n            if('reference' in payment && 'description' in payment && 'amount' in payment && 'authemail' in payment) {\r\n                payment = new Payment(payment['reference'], payment['authEmail']).add(payment['reference'], payment['amount'])\r\n            } else {\r\n                this.fail('Invalid object passed to function. Object must have the following keys: reference, description, amount, authemail');\r\n            }\r\n        }\r\n\r\n        return this.initMobile(payment, phone, method);\r\n    }\r\n\r\n    /**\r\n     * Create a new Paynow payment\r\n     * @param reference\r\n     * @returns {Payment}\r\n     */\r\n    createPayment(reference: string, authEmail: string) {\r\n        return new Payment(reference, authEmail);\r\n    }\r\n\r\n    /**\r\n     * Throw an exception with the given message\r\n     * @param message*\r\n     * @returns void\r\n     */\r\n    fail(message) {\r\n        throw new Error(message);\r\n    }\r\n\r\n    /**\r\n     * Initialize a new transaction with PayNow\r\n     * @param payment\r\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n     */\r\n    init(payment: Payment) {\r\n        this.validate(payment);\r\n\r\n        let data = this.build(payment);\r\n\r\n        return http({\r\n            method: 'POST',\r\n            uri: URL_INITIATE_TRANSACTION,\r\n            form: data,\r\n            json: false\r\n        }, false)\r\n            .then((response) => {\r\n                return this.parse(response)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Initialize a new mobile transaction with PayNow\r\n     * @param payment\r\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n     */\r\n    initMobile(payment: Payment, phone: String, method: String) {\r\n        this.validate(payment);\r\n\r\n        let data = this.buildMobile(payment, phone, method);\r\n\r\n        return http({\r\n            method: 'POST',\r\n            uri: URL_INITIATE_MOBILE_TRANSACTION,\r\n            form: data,\r\n            json: false\r\n        }, false)\r\n            .then((response) => {\r\n                return this.parse(response)\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Parses the response from Paynow\r\n     * @param response\r\n     * @returns {InitResponse}\r\n     */\r\n    parse(response) {\r\n        if(typeof response === 'undefined') {\r\n            return null\r\n        }\r\n        if (response.length > 0) {\r\n            response = this.parseQuery(response);\r\n            \r\n            if(!this.verifyHash(response)) {\r\n                throw new Error(\"Hashes do not match!\");\r\n            }\r\n            \r\n            return new InitResponse(response);\r\n        } else {\r\n            throw new Error(\"An unknown error occurred\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a SHA512 hash of the transactions\r\n     * @param values\r\n     * @param integrationKey\r\n     * @returns {string}\r\n     */\r\n    generateHash(values: Object, integrationKey: String) {\r\n        let sha512 = require('js-sha512').sha512;\r\n        let string = \"\";\r\n        \r\n        for (const key of Object.keys(values)) {\r\n            if(key !== \"hash\"){\r\n                string += (values[key]);\r\n            }\r\n        }\r\n\r\n        string += integrationKey.toLowerCase();\r\n\r\n        return sha512(string).toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * Verify hashes at all interactions with server\r\n     * @param {*} values \r\n     */\r\n    verifyHash(values: Object){\r\n       if(typeof values.hash === \"undefined\"){\r\n           return false;\r\n       }else{\r\n            return values.hash === this.generateHash(values, this.integrationKey);\r\n       }\r\n       \r\n    }\r\n\r\n\r\n    /**\r\n     * URL encodes the given string\r\n     * @param str {String}\r\n     * @returns {String}\r\n     */\r\n    urlEncode(str) {\r\n        return encodeURI(str);\r\n    }\r\n\r\n    /**\r\n     * URL decodes the given string\r\n     * @param str {String}\r\n     * @returns {String}\r\n     */\r\n    urlDecode(str) {\r\n        return decodeURIComponent((str + '')\r\n            .replace(/%(?![\\da-f]{2})/gi, function () {\r\n                return '%25'\r\n            })\r\n            .replace(/\\+/g, '%20')\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Parse responses from Paynow\r\n     * @param queryString\r\n     */\r\n    parseQuery(queryString) {\r\n        let query = {};\r\n        let pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\r\n        for (let i = 0; i < pairs.length; i++) {\r\n            let pair = pairs[i].split('=');\r\n            query[this.urlDecode(pair[0])] = this.urlDecode(pair[1] || '');\r\n        }\r\n\r\n        // if(!this.verifyHash(query))\r\n        //         throw new Error(\"Hash mismatch\");\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Build up a payment into the format required by Paynow\r\n     * @param payment\r\n     * @returns {{resulturl: String, returnurl: String, reference: String, amount: number, id: String, additionalinfo: String, authemail: String, status: String}}\r\n     */\r\n    build(payment: Payment) {\r\n        let data = {\r\n            'resulturl': this.resultUrl,\r\n            'returnurl': this.returnUrl,\r\n            'reference': payment.reference,\r\n            'amount': payment.total(),\r\n            'id': this.integrationId,\r\n            'additionalinfo': payment.info(),\r\n            'authemail': typeof payment.authEmail === \"undefined\" ? '' : payment.authEmail,\r\n            'status': 'Message'\r\n        };\r\n\r\n        for (const key of Object.keys(data)) {\r\n            data[key] = this.urlEncode(data[key]);\r\n        }\r\n\r\n        data.hash = this.generateHash(data, this.integrationKey);\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Build up a mobile payment into the format required by Paynow\r\n     * @param payment\r\n     * @returns {{resulturl: String, returnurl: String, reference: String, amount: number, id: String, additionalinfo: String, authemail: String, status: String}}\r\n     */\r\n    buildMobile(payment: Payment, phone: String, method: String) {\r\n        let data = {\r\n            'resulturl': this.resultUrl,\r\n            'returnurl': this.returnUrl,\r\n            'reference': payment.reference,\r\n            'amount': payment.total(),\r\n            'id': this.integrationId,\r\n            'additionalinfo': payment.info(),\r\n            'authemail': payment.authEmail,\r\n            'phone': phone,\r\n            'method' : method,\r\n            'status': 'Message'\r\n        };\r\n\r\n\r\n        for (const key of Object.keys(data)) {\r\n            data[key] = this.urlEncode(data[key]);\r\n        }\r\n\r\n        data.hash = this.generateHash(data, this.integrationKey);\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Check the status of a transaction\r\n     * @param url\r\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n     */\r\n    pollTransaction(url) {\r\n        return http({\r\n            method: 'POST',\r\n            uri: url,\r\n            json: false\r\n        }, false)\r\n        .then((response) => {\r\n            return this.parseStatusUpdate(response)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Parses the response from Paynow\r\n     * @param response\r\n     * @returns {StatusResponse}\r\n     */\r\n    parseStatusUpdate(response) {\r\n\r\n        if (response.length > 0) {\r\n            response = this.parseQuery(response);\r\n            \r\n            if(!this.verifyHash(response)) {\r\n                throw new Error(\"Hashes do not match!\");\r\n            }\r\n\r\n            return new StatusResponse(response);\r\n        } else {\r\n            throw new Error(\"An unknown error occurred\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates an outgoing request before sending it to Paynow (data sanity checks)\r\n     * @param payment\r\n     */\r\n    validate(payment: Payment) {\r\n        if (payment.reference.isNullOrEmpty()) {\r\n            this.fail(\"Reference is required\");\r\n        }\r\n\r\n        if (payment.items.length <= 0) {\r\n            this.fail(\"You need to have at least one item in cart\")\r\n        }\r\n\r\n        if (payment.total() <= 0) {\r\n            this.fail(\"The total should be greater than zero\")\r\n        }\r\n    }\r\n}\r\n","String.prototype.isNullOrEmpty = function(e) {\r\n    return !(this == null ? e : this);\r\n};"]}