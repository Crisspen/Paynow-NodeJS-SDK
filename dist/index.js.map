{"version":3,"sources":["../src/constants.js","../src/paynow.js","../src/utils.js"],"names":[],"mappings":";;AAAA,IAAO,cAAc,IAArB;AACA,IAAO,iBAAiB,OAAxB;;AAEA,IAAO,2BAA2B,8DAAlC;AACA,IAAO,kCAAkC,4DAAzC;;;;;;;;;ACJA,IAAM,OAAO,QAAQ,wBAAR,CAAb;;IAEM,c;;AA6BF;;;;;;;AAPA;;;;;AAVA;;;;;AAVA;;;AAgCA,wBAAY,IAAZ,EAAkB;AAAA;;AAEd,QAAG,KAAK,MAAL,CAAY,WAAZ,OAA8B,cAAjC,EAAgD;AAC5C,aAAK,KAAL,GAAa,KAAK,KAAlB;AACH,KAFD,MAEK;AACD,aAAK,SAAL,GAAiB,KAAK,SAAtB;AACA,aAAK,MAAL,GAAc,KAAK,MAAnB;AACA,aAAK,eAAL,GAAuB,KAAK,eAA5B;AACA,aAAK,OAAL,GAAe,KAAK,OAApB;AACA,aAAK,MAAL,GAAc,KAAK,MAAnB;AACH;AAEJ;;AA7BD;;;;;AAVA;;;;;IA0CE,Y;;AAsCF;;;;;;;AAXA;;;;;AAVA;;;;;AAVA;;;AAoCA,sBAAY,IAAZ,EAAkB;AAAA;;AACd,SAAK,MAAL,GAAc,KAAK,MAAL,CAAY,WAAZ,EAAd;AACA,SAAK,OAAL,GAAe,KAAK,MAAL,KAAgB,WAA/B;AACA,SAAK,WAAL,GAAmB,OAAO,KAAK,UAAZ,KAA2B,WAA9C;;AAEA,QAAI,CAAC,KAAK,OAAV,EAAmB;AACf,aAAK,KAAL,GAAa,KAAK,KAAlB;AACH,KAFD,MAEK;AACD,YAAI,KAAK,WAAT,EAAsB;AAClB,iBAAK,WAAL,GAAmB,KAAK,UAAxB;AACA,iBAAK,OAAL,GAAe,KAAK,OAApB;AACH;;AAED,YAAG,OAAO,KAAK,YAAZ,KAA6B,WAAhC,EAA4C;AACxC,iBAAK,YAAL,GAAoB,KAAK,YAAzB;AACH;AACJ;AACJ;;AA5BD;;;;;;AAVA;;;;;AAVA;;;;;AAVA;;;;;IA8DE,O;;AAiBF;;;;;;AAXA;;;AAeA,qBAAY,SAAZ,EAAuB,SAAvB,EAAkC;AAAA;;AAC9B,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,SAAL,GAAiB,SAAjB;;AAEA,aAAK,KAAL,GAAa,EAAb;AACH;;AAED;;;;;;;;AAjBA;;;;AAVA;;;;;;;4BAiCI,K,EAAe,M,EAAgB;AAC/B,gBAAI,MAAM,aAAN,MAAyB,UAAU,CAAvC,EAA0C;AACtC,uBAAO,KAAP;AACH;;AAED,iBAAK,KAAL,CAAW,IAAX,CAAgB;AACZ,4BADY;AAEZ;AAFY,aAAhB;;AAKA,mBAAO,IAAP;AACH;;;+BAEM;AACH,gBAAI,MAAM,EAAV;AACA,gBAAI,UAAU,EAAd;AACA,iBAAK,KAAL,CAAW,OAAX,CAAmB,UAAU,KAAV,EAAiB;AAChC,wBAAQ,IAAR,CAAa,MAAM,KAAnB;AACH,aAFD;;AAIA,kBAAM,QAAQ,IAAR,CAAa,GAAb,CAAN;AACA,mBAAO,GAAP;AACH;;AAED;;;;;;;gCAIQ;AACJ,mBAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAU,WAAV,EAAuB,KAAvB,EAA8B;AACnD,uBAAO,cAAc,OAAO,MAAM,MAAb,CAArB;AACH,aAFM,EAEJ,CAFI,CAAP;AAGH;;;;;;AAKL,OAAO,OAAP;;AAqBI;;;;;;;;;;AAVA;;;;AAVA;;;AA4BA,oBAAY,aAAZ,EAA2B,cAA3B,EAA2C,SAA3C,EAAsD,SAAtD,EAAiE;AAAA;;AAC7D,aAAK,aAAL,GAAqB,aAArB;AACA,aAAK,cAAL,GAAsB,cAAtB;AACA,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,SAAL,GAAiB,SAAjB;AACH;;AAED;;;;;;AApBA;;;;;AAVA;;;;;AANJ;AAAA;AAAA,6BAwCS,OAxCT,EAwCkB;AACV,gBAAG,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAtB,EAAgC;AAC5B,uBAAO,KAAP;AACH;;AAED,gBAAG,EAAE,mBAAmB,OAArB,CAAH,EAAkC;AAC9B,oBAAG,eAAe,OAAf,IAA0B,iBAAiB,OAA3C,IAAsD,YAAY,OAArE,EAA8E;AAC1E,8BAAU,IAAI,OAAJ,CAAY,QAAQ,WAAR,CAAZ,EAAkC,GAAlC,CAAsC,QAAQ,WAAR,CAAtC,EAA4D,QAAQ,QAAR,CAA5D,CAAV;AACH,iBAFD,MAEO;AACH,yBAAK,IAAL,CAAU,wGAAV;AACH;AACJ;;AAED,mBAAO,KAAK,IAAL,CAAU,OAAV,CAAP;AACH;;AAED;;;;;AAxDJ;AAAA;AAAA,mCA4De,OA5Df,EA4DwB,KA5DxB,EA4DuC,MA5DvC,EA4DuD;AAC/C,gBAAG,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAtB,EAAgC;AAC5B,uBAAO,KAAP;AACH;;AAED,gBAAG,EAAE,mBAAmB,OAArB,KAAiC,KAAjC,IAA0C,MAA7C,EAAqD;AACjD,oBAAG,eAAe,OAAf,IAA0B,iBAAiB,OAA3C,IAAsD,YAAY,OAAlE,IAA6E,eAAe,OAA/F,EAAwG;AACpG,8BAAU,IAAI,OAAJ,CAAY,QAAQ,WAAR,CAAZ,EAAkC,QAAQ,WAAR,CAAlC,EAAwD,GAAxD,CAA4D,QAAQ,WAAR,CAA5D,EAAkF,QAAQ,QAAR,CAAlF,CAAV;AACH,iBAFD,MAEO;AACH,yBAAK,IAAL,CAAU,mHAAV;AACH;AACJ;;AAED,mBAAO,KAAK,UAAL,CAAgB,OAAhB,EAAyB,KAAzB,EAAgC,MAAhC,CAAP;AACH;;AAED;;;;;;AA5EJ;AAAA;AAAA,sCAiFkB,SAjFlB,EAiFqC,SAjFrC,EAiFwD;AAChD,mBAAO,IAAI,OAAJ,CAAY,SAAZ,EAAuB,SAAvB,CAAP;AACH;;AAED;;;;;;AArFJ;AAAA;AAAA,6BA0FS,OA1FT,EA0FkB;AACV,kBAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACH;;AAED;;;;;;AA9FJ;AAAA;AAAA,6BAmGS,OAnGT,EAmG2B;AAAA;;AACnB,iBAAK,QAAL,CAAc,OAAd;;AAEA,gBAAI,OAAO,KAAK,KAAL,CAAW,OAAX,CAAX;;AAEA,mBAAO,KAAK;AACR,wBAAQ,MADA;AAER,qBAAK,wBAFG;AAGR,sBAAM,IAHE;AAIR,sBAAM;AAJE,aAAL,EAKJ,KALI,EAMF,IANE,CAMG,UAAC,QAAD,EAAc;AAChB,uBAAO,MAAK,KAAL,CAAW,QAAX,CAAP;AACP,aARM,CAAP;AASH;;AAED;;;;;;AAnHJ;AAAA;AAAA,mCAwHe,OAxHf,EAwHiC,KAxHjC,EAwHgD,MAxHhD,EAwHgE;AAAA;;AACxD,iBAAK,QAAL,CAAc,OAAd;;AAEA,gBAAI,OAAO,KAAK,WAAL,CAAiB,OAAjB,EAA0B,KAA1B,EAAiC,MAAjC,CAAX;;AAEA,mBAAO,KAAK;AACR,wBAAQ,MADA;AAER,qBAAK,+BAFG;AAGR,sBAAM,IAHE;AAIR,sBAAM;AAJE,aAAL,EAKJ,KALI,EAMF,IANE,CAMG,UAAC,QAAD,EAAc;AAChB,uBAAO,OAAK,KAAL,CAAW,QAAX,CAAP;AACH,aARE,CAAP;AASH;;AAED;;;;;;AAxIJ;AAAA;AAAA,8BA6IU,QA7IV,EA6IoB;AACZ,gBAAG,OAAO,QAAP,KAAoB,WAAvB,EAAoC;AAChC,uBAAO,IAAP;AACH;AACD,gBAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,2BAAW,KAAK,UAAL,CAAgB,QAAhB,CAAX;AACA,uBAAO,IAAI,YAAJ,CAAiB,QAAjB,CAAP;AACH,aAHD,MAGO;AACH,sBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACH;AACJ;;AAED;;;;;;;AAzJJ;AAAA;AAAA,qCA+JiB,MA/JjB,EA+JiC,cA/JjC,EA+JyD;AACjD,gBAAI,SAAS,QAAQ,WAAR,EAAqB,MAAlC;AACA,gBAAI,SAAS,EAAb;;AAFiD;AAAA;AAAA;;AAAA;AAIjD,qCAAkB,OAAO,IAAP,CAAY,MAAZ,CAAlB,8HAAuC;AAAA,wBAA5B,GAA4B;;AACnC,wBAAG,QAAQ,MAAX,EAAkB;AACd,kCAAW,OAAO,GAAP,CAAX;AACH;AACJ;AARgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUjD,sBAAU,eAAe,WAAf,EAAV;;AAEA,mBAAO,OAAO,MAAP,EAAe,WAAf,EAAP;AACH;;AAED;;;;;AA9KJ;AAAA;AAAA,mCAkLe,MAlLf,EAkL8B;AACvB,gBAAG,OAAO,OAAO,IAAd,KAAuB,WAA1B,EAAsC;AAClC,uBAAO,KAAP;AACH,aAFD,MAEK;AACA,uBAAO,OAAO,IAAP,KAAgB,KAAK,YAAL,CAAkB,MAAlB,EAA0B,KAAK,cAA/B,CAAvB;AACJ;AAEH;;AAGD;;;;;;AA5LJ;AAAA;AAAA,kCAiMc,GAjMd,EAiMmB;AACX,mBAAO,UAAU,GAAV,CAAP;AACH;;AAED;;;;;;AArMJ;AAAA;AAAA,kCA0Mc,GA1Md,EA0MmB;AACX,mBAAO,mBAAmB,CAAC,MAAM,EAAP,EACrB,OADqB,CACb,mBADa,EACQ,YAAY;AACtC,uBAAO,KAAP;AACH,aAHqB,EAIrB,OAJqB,CAIb,KAJa,EAIN,KAJM,CAAnB,CAAP;AAMH;;AAED;;;;;AAnNJ;AAAA;AAAA,mCAuNe,WAvNf,EAuN4B;AACpB,gBAAI,QAAQ,EAAZ;AACA,gBAAI,QAAQ,CAAC,YAAY,CAAZ,MAAmB,GAAnB,GAAyB,YAAY,MAAZ,CAAmB,CAAnB,CAAzB,GAAiD,WAAlD,EAA+D,KAA/D,CAAqE,GAArE,CAAZ;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACnC,oBAAI,OAAO,MAAM,CAAN,EAAS,KAAT,CAAe,GAAf,CAAX;AACA,sBAAM,KAAK,SAAL,CAAe,KAAK,CAAL,CAAf,CAAN,IAAiC,KAAK,SAAL,CAAe,KAAK,CAAL,KAAW,EAA1B,CAAjC;AACH;;AAED;AACA;AACA,mBAAO,KAAP;AACH;;AAED;;;;;;AApOJ;AAAA;AAAA,8BAyOU,OAzOV,EAyO4B;AACpB,gBAAI,OAAO;AACP,6BAAa,KAAK,SADX;AAEP,6BAAa,KAAK,SAFX;AAGP,6BAAa,QAAQ,SAHd;AAIP,0BAAU,QAAQ,KAAR,EAJH;AAKP,sBAAM,KAAK,aALJ;AAMP,kCAAkB,QAAQ,IAAR,EANX;AAOP,6BAAa,OAAO,QAAQ,SAAf,KAA6B,WAA7B,GAA2C,EAA3C,GAAgD,QAAQ,SAP9D;AAQP,0BAAU;AARH,aAAX;;AADoB;AAAA;AAAA;;AAAA;AAYpB,sCAAkB,OAAO,IAAP,CAAY,IAAZ,CAAlB,mIAAqC;AAAA,wBAA1B,GAA0B;;AACjC,yBAAK,GAAL,IAAY,KAAK,SAAL,CAAe,KAAK,GAAL,CAAf,CAAZ;AACH;AAdmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBpB,iBAAK,IAAL,GAAY,KAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAK,cAA7B,CAAZ;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;AA9PJ;AAAA;AAAA,oCAmQgB,OAnQhB,EAmQkC,KAnQlC,EAmQiD,MAnQjD,EAmQiE;AACzD,gBAAI,OAAO;AACP,6BAAa,KAAK,SADX;AAEP,6BAAa,KAAK,SAFX;AAGP,6BAAa,QAAQ,SAHd;AAIP,0BAAU,QAAQ,KAAR,EAJH;AAKP,sBAAM,KAAK,aALJ;AAMP,kCAAkB,QAAQ,IAAR,EANX;AAOP,6BAAa,QAAQ,SAPd;AAQP,yBAAS,KARF;AASP,0BAAW,MATJ;AAUP,0BAAU;AAVH,aAAX;;AADyD;AAAA;AAAA;;AAAA;AAezD,sCAAkB,OAAO,IAAP,CAAY,IAAZ,CAAlB,mIAAqC;AAAA,wBAA1B,GAA0B;;AACjC,yBAAK,GAAL,IAAY,KAAK,SAAL,CAAe,KAAK,GAAL,CAAf,CAAZ;AACH;AAjBwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBzD,iBAAK,IAAL,GAAY,KAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAK,cAA7B,CAAZ;AACA,mBAAO,IAAP;AACH;;AAED;;;;;;AA1RJ;AAAA;AAAA,wCA+RoB,GA/RpB,EA+RyB;AAAA;;AACjB,mBAAO,KAAK;AACR,wBAAQ,MADA;AAER,qBAAK,GAFG;AAGR,sBAAM;AAHE,aAAL,EAIJ,KAJI,EAKN,IALM,CAKD,UAAC,QAAD,EAAc;AAChB,uBAAO,OAAK,iBAAL,CAAuB,QAAvB,CAAP;AACH,aAPM,CAAP;AAQH;;AAED;;;;;;AA1SJ;AAAA;AAAA,0CA+SsB,QA/StB,EA+SgC;;AAExB,gBAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB;AACrB,2BAAW,KAAK,UAAL,CAAgB,QAAhB,CAAX;;AAEA,uBAAO,IAAI,cAAJ,CAAmB,QAAnB,CAAP;AACH,aAJD,MAIO;AACH,sBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACH;AACJ;;AAED;;;;;AA1TJ;AAAA;AAAA,iCA8Ta,OA9Tb,EA8T+B;AACvB,gBAAI,QAAQ,SAAR,CAAkB,aAAlB,EAAJ,EAAuC;AACnC,qBAAK,IAAL,CAAU,uBAAV;AACH;;AAED,gBAAI,QAAQ,KAAR,CAAc,MAAd,IAAwB,CAA5B,EAA+B;AAC3B,qBAAK,IAAL,CAAU,4CAAV;AACH;;AAED,gBAAI,QAAQ,KAAR,MAAmB,CAAvB,EAA0B;AACtB,qBAAK,IAAL,CAAU,uCAAV;AACH;AACJ;AA1UL;;AAAA;AAAA;;;AC1LA,OAAO,SAAP,CAAiB,aAAjB,GAAiC,UAAS,CAAT,EAAY;AACzC,WAAO,EAAE,QAAQ,IAAR,GAAe,CAAf,GAAmB,IAArB,CAAP;AACH,CAFD","file":"index.js","sourcesContent":["const  RESPONSE_OK = 'ok';\nconst  RESPONSE_ERROR = 'error';\n\nconst  URL_INITIATE_TRANSACTION = 'https://paynow.webdevworld.com/interface/initiatetransaction';\nconst  URL_INITIATE_MOBILE_TRANSACTION = 'https://paynow.webdevworld.com/interface/remotetransaction';\n","const http = require('request-promise-native');\n\nclass StatusResponse {\n\n    /**\n     * Merchant Transaction Reference\n     */\n    reference: String;\n\n    /**\n     * The original amount of the transaction\n     */\n    amount: String;\n\n    /**\n     * Paynow transaction reference\n     */\n    paynowreference: String;\n\n    /**\n     * The URL on Paynow the merchant site can poll to confirm the transactionâ€™s current status. \n     */\n    pollurl: String;\n\n    /**\n     * Status returned from Paynow\n     */\n    status: String;\n\n    error: String;\n\n    /**\n     * Default constructor\n     *\n     * @param data\n     */\n    constructor(data) {\n\n        if(data.status.toLowerCase() === RESPONSE_ERROR){\n            this.error = data.error;\n        }else{\n            this.reference = data.reference;\n            this.amount = data.amount;\n            this.paynowreference = data.paynowreference;\n            this.pollurl = data.pollurl;\n            this.status = data.status;\n        }\n        \n    }\n}\n\nclass InitResponse {\n\n    /**\n     * Boolean indicating whether initiate request was successful or not\n     */\n    success: boolean;\n\n    /**\n     * Boolean indicating whether the response contains a url to redirect to\n     */\n    hasRedirect: boolean;\n\n    /**\n     * The url the user should be taken to so they can make a payment\n     */\n    redirectUrl: String;\n\n    /**\n     * The error message from Paynow, if any\n     */\n    error: String;\n\n    /**\n     * The poll URL sent from Paynow\n     */\n    pollUrl: String;\n\n    /**\n     * The instructions for USSD push for customers to dial incase of mobile money payments\n     */\n    instructions: String;\n\n    /**\n     * The status from paynow\n     * @type {String}\n     */\n    status: String\n\n    /**\n     * Default constructor\n     *\n     * @param data\n     */\n    constructor(data) {\n        this.status = data.status.toLowerCase()\n        this.success = this.status === RESPONSE_OK;\n        this.hasRedirect = typeof data.browserurl !== \"undefined\";\n\n        if (!this.success) {\n            this.error = data.error;\n        }else{\n            if (this.hasRedirect) {\n                this.redirectUrl = data.browserurl;\n                this.pollUrl = data.pollurl;\n            }\n            \n            if(typeof data.instructions !== \"undefined\"){\n                this.instructions = data.instructions;\n            }\n        }\n    }\n\n}\n\nclass Payment {\n    /**\n     * Unique identifier for transaction\n     */\n    reference: string;\n\n    /**\n     * Items being paid from by client\n     */\n    items: [];\n\n    /**\n     * Email address from client\n     */\n    authemail: String;\n\n\n    /**\n     * Payment constructor\n     * @param reference\n     */\n    constructor(reference, authEmail) {\n        this.reference = reference;\n        this.authEmail = authEmail;\n\n        this.items = [];\n    }\n\n    /**\n     * Adds an item to the 'shopping cart'\n     * @param title\n     * @param amount\n     * @returns {*} Returns false if parameters fail validation\n     */\n    add(title: String, amount: Number) {\n        if (title.isNullOrEmpty() || amount <= 0) {\n            return false;\n        }\n\n        this.items.push({\n            title,\n            amount\n        });\n\n        return this;\n    }\n\n    info() {\n        let str = \"\";\n        let infoArr = [];\n        this.items.forEach(function (value) {\n            infoArr.push(value.title);\n        });\n\n        str = infoArr.join(\",\");\n        return str;\n    }\n\n    /**\n     * Get the total of the items in the cart\n     * @returns {*|number}\n     */\n    total() {\n        return this.items.reduce(function (accumulator, value) {\n            return accumulator + Number(value.amount);\n        }, 0);\n    }\n\n}\n\n\nmodule.exports = class Paynow {\n    /**\n     * Merchant's integration id\n     */\n    integrationId: String;\n\n    /**\n     * Merchant's integration key\n     */\n    integrationKey: String;\n\n    /**\n     * Url where where transaction status will be sent\n     */\n    resultUrl: String;\n\n    /**\n     * Url to redirect the user after payment\n     */\n    returnUrl: String;\n\n    /**\n     * Default constructor\n     *\n     * @param integrationId {String} Merchant's integration id\n     * @param integrationKey {String} Merchant's integration key\n     * @param resultUrl {String} Url where where transaction status will be sent\n     * @param returnUrl {String} Url to redirect the user after payment\n     */\n    constructor(integrationId, integrationKey, resultUrl, returnUrl) {\n        this.integrationId = integrationId;\n        this.integrationKey = integrationKey;\n        this.resultUrl = resultUrl;\n        this.returnUrl = returnUrl\n    }\n\n    /**\n     * Send a payment to paynow\n     * @param payment \n     */\n    send(payment) {\n        if(typeof payment !== 'object') {\n            return false;\n        }\n\n        if(!(payment instanceof Payment)) {\n            if('reference' in payment && 'description' in payment && 'amount' in payment) {\n                payment = new Payment(payment['reference']).add(payment['reference'], payment['amount'])\n            } else {\n                this.fail('Invalid object passed to function. Object must have the following keys: reference, description, amount');\n            }\n        }\n\n        return this.init(payment);\n    }\n\n    /**\n     * Send a mobile money payment to paynow\n     * @param payment \n     */\n    sendMobile(payment, phone: String, method: String) {\n        if(typeof payment !== 'object') {\n            return false;\n        }\n\n        if(!(payment instanceof Payment) && phone && method) {\n            if('reference' in payment && 'description' in payment && 'amount' in payment && 'authemail' in payment) {\n                payment = new Payment(payment['reference'], payment['authEmail']).add(payment['reference'], payment['amount'])\n            } else {\n                this.fail('Invalid object passed to function. Object must have the following keys: reference, description, amount, authemail');\n            }\n        }\n\n        return this.initMobile(payment, phone, method);\n    }\n\n    /**\n     * Create a new Paynow payment\n     * @param reference\n     * @returns {Payment}\n     */\n    createPayment(reference: string, authEmail: string) {\n        return new Payment(reference, authEmail);\n    }\n\n    /**\n     * Throw an exception with the given message\n     * @param message*\n     * @returns void\n     */\n    fail(message) {\n        throw new Error(message);\n    }\n\n    /**\n     * Initialize a new transaction with PayNow\n     * @param payment\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\n     */\n    init(payment: Payment) {\n        this.validate(payment);\n\n        let data = this.build(payment);\n\n        return http({\n            method: 'POST',\n            uri: URL_INITIATE_TRANSACTION,\n            form: data,\n            json: false\n        }, false)\n            .then((response) => {\n                return this.parse(response)\n        })\n    }\n\n    /**\n     * Initialize a new mobile transaction with PayNow\n     * @param payment\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\n     */\n    initMobile(payment: Payment, phone: String, method: String) {\n        this.validate(payment);\n\n        let data = this.buildMobile(payment, phone, method);\n\n        return http({\n            method: 'POST',\n            uri: URL_INITIATE_MOBILE_TRANSACTION,\n            form: data,\n            json: false\n        }, false)\n            .then((response) => {\n                return this.parse(response)\n            })\n    }\n\n    /**\n     * Parses the response from Paynow\n     * @param response\n     * @returns {InitResponse}\n     */\n    parse(response) {\n        if(typeof response === 'undefined') {\n            return null\n        }\n        if (response.length > 0) {\n            response = this.parseQuery(response);\n            return new InitResponse(response);\n        } else {\n            throw new Error(\"An unknown error occurred\")\n        }\n    }\n\n    /**\n     * Creates a SHA512 hash of the transactions\n     * @param values\n     * @param integrationKey\n     * @returns {string}\n     */\n    generateHash(values: Object, integrationKey: String) {\n        let sha512 = require('js-sha512').sha512;\n        let string = \"\";\n        \n        for (const key of Object.keys(values)) {\n            if(key !== \"hash\"){\n                string += (values[key]);\n            }\n        }\n\n        string += integrationKey.toLowerCase();\n\n        return sha512(string).toUpperCase();\n    }\n\n    /**\n     * Verify hashes at all interactions with server\n     * @param {*} values \n     */\n    verifyHash(values: Object){\n       if(typeof values.hash === \"undefined\"){\n           return false;\n       }else{\n            return values.hash === this.generateHash(values, this.integrationKey);\n       }\n       \n    }\n\n\n    /**\n     * URL encodes the given string\n     * @param str {String}\n     * @returns {String}\n     */\n    urlEncode(str) {\n        return encodeURI(str);\n    }\n\n    /**\n     * URL decodes the given string\n     * @param str {String}\n     * @returns {String}\n     */\n    urlDecode(str) {\n        return decodeURIComponent((str + '')\n            .replace(/%(?![\\da-f]{2})/gi, function () {\n                return '%25'\n            })\n            .replace(/\\+/g, '%20')\n        )\n    }\n\n    /**\n     * Parse responses from Paynow\n     * @param queryString\n     */\n    parseQuery(queryString) {\n        let query = {};\n        let pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\n        for (let i = 0; i < pairs.length; i++) {\n            let pair = pairs[i].split('=');\n            query[this.urlDecode(pair[0])] = this.urlDecode(pair[1] || '');\n        }\n\n        // if(!this.verifyHash(query))\n        //         throw new Error(\"Hash mismatch\");\n        return query;\n    }\n\n    /**\n     * Build up a payment into the format required by Paynow\n     * @param payment\n     * @returns {{resulturl: String, returnurl: String, reference: String, amount: number, id: String, additionalinfo: String, authemail: String, status: String}}\n     */\n    build(payment: Payment) {\n        let data = {\n            'resulturl': this.resultUrl,\n            'returnurl': this.returnUrl,\n            'reference': payment.reference,\n            'amount': payment.total(),\n            'id': this.integrationId,\n            'additionalinfo': payment.info(),\n            'authemail': typeof payment.authEmail === \"undefined\" ? '' : payment.authEmail,\n            'status': 'Message'\n        };\n\n        for (const key of Object.keys(data)) {\n            data[key] = this.urlEncode(data[key]);\n        }\n\n        data.hash = this.generateHash(data, this.integrationKey);\n\n        return data;\n    }\n\n    /**\n     * Build up a mobile payment into the format required by Paynow\n     * @param payment\n     * @returns {{resulturl: String, returnurl: String, reference: String, amount: number, id: String, additionalinfo: String, authemail: String, status: String}}\n     */\n    buildMobile(payment: Payment, phone: String, method: String) {\n        let data = {\n            'resulturl': this.resultUrl,\n            'returnurl': this.returnUrl,\n            'reference': payment.reference,\n            'amount': payment.total(),\n            'id': this.integrationId,\n            'additionalinfo': payment.info(),\n            'authemail': payment.authEmail,\n            'phone': phone,\n            'method' : method,\n            'status': 'Message'\n        };\n\n\n        for (const key of Object.keys(data)) {\n            data[key] = this.urlEncode(data[key]);\n        }\n\n        data.hash = this.generateHash(data, this.integrationKey);\n        return data;\n    }\n\n    /**\n     * Check the status of a transaction\n     * @param url\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\n     */\n    pollTransaction(url) {\n        return http({\n            method: 'POST',\n            uri: url,\n            json: false\n        }, false)\n        .then((response) => {\n            return this.parseStatusUpdate(response)\n        })\n    }\n\n    /**\n     * Parses the response from Paynow\n     * @param response\n     * @returns {StatusResponse}\n     */\n    parseStatusUpdate(response) {\n\n        if (response.length > 0) {\n            response = this.parseQuery(response);\n\n            return new StatusResponse(response);\n        } else {\n            throw new Error(\"An unknown error occurred\")\n        }\n    }\n\n    /**\n     * Validates an outgoing request before sending it to Paynow (data sanity checks)\n     * @param payment\n     */\n    validate(payment: Payment) {\n        if (payment.reference.isNullOrEmpty()) {\n            this.fail(\"Reference is required\");\n        }\n\n        if (payment.items.length <= 0) {\n            this.fail(\"You need to have at least one item in cart\")\n        }\n\n        if (payment.total() <= 0) {\n            this.fail(\"The total should be greater than zero\")\n        }\n    }\n}\n","String.prototype.isNullOrEmpty = function(e) {\n    return !(this == null ? e : this);\n};"]}