{"version":3,"sources":["../src/constants.js","../src/paynow.js","../src/utils.js"],"names":[],"mappings":"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","file":"paynow.js","sourcesContent":["const  RESPONSE_OK = 'ok';\r\nconst  RESPONSE_PAID = 'paid';\r\nconst  RESPONSE_ERROR = 'error';\r\nconst  RESPONSE_FAILED = 'failed';\r\nconst  RESPONSE_DELIVERED = 'delivered';\r\nconst  RESPONSE_CANCELLED = 'cancelled';\r\nconst  RESPONSE_INVALID_ID = 'invalid id.';\r\nconst  RESPONSE_AWAITING_REDIRECT = 'awaiting redirect';\r\nconst  RESPONSE_AWAITING_DELIVERY = 'awaiting delivery';\r\nconst  RESPONSE_CREATED_NOT_PAID = 'created but not paid';\r\n\r\nconst  URL_INITIATE_TRANSACTION = 'https://paynow.webdevworld.com/interface/initiatetransaction';\r\nconst  URL_INITIATE_MOBILE_TRANSACTION = 'https://paynow.webdevworld.com/interface/remotetransaction';\r\n","const http = require('request-promise-native');\r\n// TODO: Verify hashes at all interactions with server\r\nclass StatusResponse {\r\n\r\n    /**\r\n     * Boolean indicating whether the transaction was paid or not\r\n     */\r\n    paid: boolean;\r\n\r\n    /**\r\n     * The original amount of the transaction\r\n     */\r\n    amount: String;\r\n\r\n    /**\r\n     * The original reference of the transaction\r\n     */\r\n    reference: String;\r\n\r\n\r\n\r\n    /**\r\n     * Default constructor\r\n     *\r\n     * @param data\r\n     */\r\n    constructor(data) {\r\n        this.paid = data.status.toLowerCase() === RESPONSE_PAID;\r\n        this.amount = data.amount;\r\n        this.reference = data.reference;\r\n    }\r\n}\r\n\r\nclass InitResponse {\r\n\r\n    /**\r\n     * Boolean indicating whether initiate request was successful or not\r\n     */\r\n    success: boolean;\r\n\r\n    /**\r\n     * Boolean indicating whether the response contains a url to redirect to\r\n     */\r\n    hasRedirect: boolean;\r\n\r\n    /**\r\n     * The url the user should be taken to so they can make a payment\r\n     */\r\n    redirectUrl: String;\r\n\r\n    /**\r\n     * The error message from Paynow, if any\r\n     */\r\n    error: String;\r\n\r\n    /**\r\n     * The poll URL sent from Paynow\r\n     */\r\n    pollUrl: String;\r\n\r\n\r\n    /**\r\n     * Default constructor\r\n     *\r\n     * @param data\r\n     */\r\n    constructor(data) {\r\n        this.success = data.status.toLowerCase() !== 'error';\r\n        this.hasRedirect = typeof data.browserurl !== \"undefined\";\r\n\r\n        if (!this.success) {\r\n            this.error = data.error;\r\n        }\r\n\r\n        if (this.hasRedirect) {\r\n            this.redirectUrl = data.browserurl;\r\n            this.pollUrl = data.pollurl;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Payment {\r\n    /**\r\n     * Unique identifier for transaction\r\n     */\r\n    reference: string;\r\n\r\n    /**\r\n     * Items being paid from by client\r\n     */\r\n    items: [];\r\n\r\n    /**\r\n     * Payment constructor\r\n     * @param reference\r\n     */\r\n    constructor(reference) {\r\n        this.reference = reference;\r\n\r\n        this.items = [];\r\n    }\r\n\r\n    /**\r\n     * Adds an item to the 'shopping cart'\r\n     * @param title\r\n     * @param amount\r\n     * @returns {*} Returns false if parameters fail validation\r\n     */\r\n    add(title: String, amount: Number) {\r\n        if (title.isNullOrEmpty() || amount <= 0) {\r\n            return false;\r\n        }\r\n\r\n        this.items.push({\r\n            title,\r\n            amount\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    info() {\r\n        let str = \"\";\r\n        this.items.forEach(function (value) {\r\n            str += value.title + \", \"; // TODO: Update! This could be better\r\n        });\r\n\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Get the total of the items in the cart\r\n     * @returns {*|number}\r\n     */\r\n    total() {\r\n        return this.items.reduce(function (accumulator, value) {\r\n            return accumulator + value.amount;\r\n        }, 0);\r\n    }\r\n\r\n}\r\n\r\n\r\nmodule.exports = class Paynow {\r\n    /**\r\n     * Merchant's integration id\r\n     */\r\n    integrationId: String;\r\n\r\n    /**\r\n     * Merchant's integration key\r\n     */\r\n    integrationKey: String;\r\n\r\n    /**\r\n     * Url where where transaction status will be sent\r\n     */\r\n    resultUrl: String;\r\n\r\n    /**\r\n     * Url to redirect the user after payment\r\n     */\r\n    returnUrl: String;\r\n\r\n    /**\r\n     * Default constructor\r\n     *\r\n     * @param integrationId {String} Merchant's integration id\r\n     * @param integrationKey {String} Merchant's integration key\r\n     * @param resultUrl {String} Url where where transaction status will be sent\r\n     * @param returnUrl {String} Url to redirect the user after payment\r\n     */\r\n    constructor(integrationId, integrationKey, resultUrl, returnUrl) {\r\n        this.integrationId = integrationId;\r\n        this.integrationKey = integrationKey;\r\n        this.resultUrl = resultUrl;\r\n        this.returnUrl = returnUrl\r\n    }\r\n\r\n    /**\r\n     * Send a payment to paynow\r\n     * @param payment\r\n     */\r\n    send(payment: Payment) {\r\n        return this.init(payment);\r\n    }\r\n\r\n    /**\r\n     * Create a new Paynow payment\r\n     * @param reference\r\n     * @returns {Payment}\r\n     */\r\n    createPayment(reference: string) {\r\n        return new Payment(reference);\r\n    }\r\n\r\n    /**\r\n     * Throw an exception with the given message\r\n     * @param message*\r\n     * @returns void\r\n     */\r\n    fail(message) {\r\n        throw new Error(message);\r\n    }\r\n\r\n    /**\r\n     * Initialize a new transaction with PayNow\r\n     * @param payment\r\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n     */\r\n    init(payment: Payment) {\r\n        this.validate(payment);\r\n\r\n        let data = this.build(payment);\r\n\r\n        return http({\r\n            method: 'POST',\r\n            uri: URL_INITIATE_TRANSACTION,\r\n            form: data,\r\n            json: false\r\n        }, false)\r\n\r\n            .then((response) => {\r\n                return this.parse(response)\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Parses the response from Paynow\r\n     * @param response\r\n     * @returns {InitResponse}\r\n     */\r\n    parse(response) {\r\n        if (response.length > 0) {\r\n            response = this.parseQuery(response);\r\n\r\n            return new InitResponse(response);\r\n        } else {\r\n            throw new Error(\"An unknown error occurred\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a SHA512 hash of the transactions\r\n     * @param values\r\n     * @param integrationKey\r\n     * @returns {string}\r\n     */\r\n    generateHash(values: Object, integrationKey: String) {\r\n        let sha512 = require('js-sha512').sha512;\r\n        let string = \"\";\r\n\r\n        for (const key of Object.keys(values)) {\r\n            string += (values[key]);\r\n        }\r\n\r\n        string += integrationKey;\r\n\r\n        return sha512(string).toUpperCase();\r\n    }\r\n\r\n    /**\r\n     * URL encodes the given string\r\n     * @param str {String}\r\n     * @returns {String}\r\n     */\r\n    urlEncode(str) {\r\n        return encodeURIComponent(str)\r\n            .replace(/!/g, '%21')\r\n            .replace(/'/g, '%27')\r\n            .replace(/\\(/g, '%28')\r\n            .replace(/\\)/g, '%29')\r\n            .replace(/\\*/g, '%2A')\r\n            .replace(/%20/g, '+')\r\n    }\r\n\r\n    /**\r\n     * URL decodes the given string\r\n     * @param str {String}\r\n     * @returns {String}\r\n     */\r\n    urlDecode(str) {\r\n        return decodeURIComponent((str + '')\r\n            .replace(/%(?![\\da-f]{2})/gi, function () {\r\n                return '%25'\r\n            })\r\n            .replace(/\\+/g, '%20')\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Parse responses from Paynow\r\n     * @param queryString\r\n     */\r\n    parseQuery(queryString) {\r\n        let query = {};\r\n        let pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');\r\n        for (let i = 0; i < pairs.length; i++) {\r\n            let pair = pairs[i].split('=');\r\n            query[this.urlDecode(pair[0])] = this.urlDecode(pair[1] || '');\r\n        }\r\n        return query;\r\n    }\r\n\r\n    /**\r\n     * Build up a payment into the format required by Paynow\r\n     * @param payment\r\n     * @returns {{resulturl: String, returnurl: String, reference: String, amount: number, id: String, additionalinfo: String, authemail: String, status: String}}\r\n     */\r\n    build(payment: Payment) {\r\n        let data = {\r\n            'resulturl': this.resultUrl,\r\n            'returnurl': this.returnUrl,\r\n            'reference': payment.reference,\r\n            'amount': payment.total(),\r\n            'id': this.integrationId,\r\n            'additionalinfo': payment.info(),\r\n            'authemail': '',\r\n            'status': 'Message'\r\n        };\r\n\r\n\r\n        for (const key of Object.keys(data)) {\r\n            data[key] = this.urlEncode(data[key]);\r\n        }\r\n\r\n        data.hash = this.generateHash(data, this.integrationKey);\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Check the status of a transaction\r\n     * @param url\r\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n     */\r\n    checkTransactionStatus(url) {\r\n        return http({\r\n            method: 'POST',\r\n            uri: url,\r\n            json: false\r\n        }, false)\r\n\r\n            .then((response) => {\r\n                return this.parse(response)\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Check the status of a transaction\r\n     * @param url\r\n     * @returns {PromiseLike<InitResponse> | Promise<InitResponse>}\r\n     */\r\n    processStatusUpdate(url) {\r\n        return http({\r\n            method: 'POST',\r\n            uri: url,\r\n            json: false\r\n        }, false)\r\n\r\n            .then((response) => {\r\n                return this.parse(response)\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Parses the response from Paynow\r\n     * @param response\r\n     * @returns {InitResponse}\r\n     */\r\n    parseStatusUpdate(response) {\r\n        if (response.length > 0) {\r\n            response = this.parseQuery(response);\r\n\r\n            return new StatusResponse(response);\r\n        } else {\r\n            throw new Error(\"An unknown error occurred\")\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Validates an outgoing request before sending it to Paynow (data sanity checks)\r\n     * @param payment\r\n     */\r\n    validate(payment: Payment) {\r\n        if (payment.reference.isNullOrEmpty()) {\r\n            this.fail(\"Reference is required\");\r\n        }\r\n\r\n        if (payment.items.length <= 0) {\r\n            this.fail(\"You need to have at least one item in cart\")\r\n        }\r\n\r\n        if (payment.total() <= 0) {\r\n            this.fail(\"The total should be greater than zero\")\r\n        }\r\n    }\r\n}\r\n","String.prototype.isNullOrEmpty = function(e) {\r\n    return !(this == null ? e : this);\r\n};"]}